|------------------------------------------------------------| 
|                   KillAll2NI.mac 
|
|   Written by: Lano  
|      Last Modified by: TheDroidUrLookingFor 
|
|
| Contributors: Lano, TheDroidUrLookingFor 
|------------------------------------------------------------|
|------------------------------------------------------------| 
|          Events 
|------------------------------------------------------------| 
#Event InstTime "#*#You only have #1# minutes remaining before this expedition comes to an end."
#Event CantLoot "You may not loot this corpse at this time."
#Event OorLoot "#*#You are too far away to loot that corpse#*#"
#Event OorLoot "#*#Corpse too far away.#*#"
| #Event SellFabledItems "#*#The Fabled Jim Carrey whispers, 'Which currency would you like to receive for your rank 1 fabled items? #1#?'"
|------------------------------------------------------------| 
|          Defines 
|------------------------------------------------------------| 
#define CorpseScanDelay 1
#define CorpseScanLoops 2
#define CorpseOpenDelay 3
#define MaxLootAttempts 3
#define MinMobsInZone 10
#define RefreshInstanceAtMins 5
|------------------------------------------------------------| 
|          Main Rountine 
|------------------------------------------------------------|
sub PRINTMETHOD(Message)
    /echo [KillAll2NI] ${Message}
/return
sub Main
    /declare currentVersion string outer 1.1
    /call PRINTMETHOD "KillAll by Lano"
    /call PRINTMETHOD "Version: ${currentVersion}"
    /echo 
    /call ClearCorpses
    |------------------------------------------------------------| 
    |          Declares 
    |------------------------------------------------------------| 
    /call PRINTMETHOD "Initializing"
    | Radius to check around user for mobs
    /declare spawnSearch string outer "npc radius 60 los targetable noalert 1"
    | Count number of mobs in Zone
    /declare mobsSearch string outer "npc targetable noalert 1"
    | Aggro Item
    /declare aggroItem string outer "Charm of Hate"
    | Refresh Item
    /declare respawnItem string outer "Uber Charm of Refreshing"
    | only loots goblins
    /declare corpseSearch string outer "npccorpse treasure goblin noalert 25"
    | Filter for items containing name
    /declare fabledCheck string outer "Empowered"
    | Set to true if you want it to use AA tokens
    /declare ClickAATokens bool outer true
    | Group a character to do the looting?
    /declare GroupAlt bool outer true
    | Name of the FableLooter character
    /declare AltLooterName string outer Binli
    | Do you want to loot items?
    /declare DoLoot bool outer false
    | | Change LootFabledItems to false to skip looting fableds that you have not maked as loot
    /declare LootFabledItems bool outer false
    | Should we pickup things goblins are dropping when running?
    /declare LootGroundSpawns bool outer false
    | Which INI file should we read for looting?
    /declare lootINIFile string outer EZLoot\\EZLoot-WT.ini
    | Should we use Experience Potions?
    /declare UseExpPotions bool outer true
    | Make sure we don't delevel below 80?
    /declare KeepMaxLevel bool outer true
    | Use Bems Coin Sack on timer?
    /declare useCoinSack bool outer true
    | Use Currency Double on timer?
    /declare useCurrencyCharm bool outer true
    | Use Paladin Class AA?
    /declare usePaladinAA bool outer true
    | Use Cleric Class AA?
    /declare useClericAA bool outer true
    | Use Bemvaras's Breatplate to cure?
    /declare useBemChest bool outer true
    | Use Bemvaras's Legs for exp buff?
    /declare useBemLegs bool outer true
    | Use Bemvaras's Gloves for Talisman buff?
    /declare useBemGloves bool outer true
    | Use Amulet of Buffing?
    /declare useBuffCharm bool outer true
    | Name of your Amulet of Buffing?
    /declare buffCharmName string outer Amulet of Ultimate Buffing
    | The Buff your Amulet of Buffing gives you want to recast if expires
    /declare buffCharmBuffName string outer Talisman of the Panther Rk. III

    |
    |   Work in progress stuff
    |
    | | Should we go to hub to bank when bags are full?
    | /declare bankDeposit bool outer false
    | | What zone has our banker?
    | /declare bankZone int outer 451
    | | How many slots left in our inventory before we bank?
    | /declare bankAtFreeSlots int outer 5
    | | Who do we use to bank?
    | /declare bankNPC string outer Griphook
    | | Should we sell items marked as Fabled?
    | /declare sellFabled bool outer false
    | | Who do we sell items marked as Fabled to?
    | /declare fabledNPC string outer The Fabled Jim Carrey
    | | What currency do we want in exchange?  Doublons, Papers, Cash
    | /declare SellFabledFor string outer Papers
    | | Should we sell items marked as Cash?
    | /declare sellCash bool outer false
    | | Who do we sell items marked as Cash to?
    | /declare cashNPC string outer Silent Bob
    
    /call PRINTMETHOD "Loading Ignore Alert List"
    | add any spawn you wish to ignore here 
    /squelch /alert clear 1
	/squelch /alert add 1 "Gillamina Garstobidokis"
	/squelch /alert add 1 "an ornate chest"
	/squelch /alert add 1 "${Me.CleanName}'s Pet"
	/squelch /alert add 1 "${Me.CleanName}"
    /squelch /alert add 1 "Cruel Illusion"
    /squelch /alert add 1 "lockout ikkinz"
    /squelch /alert add 1 "Kilidna"
    /squelch /alert add 1 "Pixtt Grand Summoner"
    /squelch /alert add 1 "Kevren Nalavat"
    /squelch /alert add 1 "Kenra Kalekkio"
    /squelch /alert add 1 "Pixtt Nemis"
    /squelch /alert add 1 "Undari Perunea"
    /squelch /alert add 1 "Sentinel of the Altar"
    /squelch /alert add 1 "Retharg"
    /squelch /alert add 1 "Siska the Spumed"
    /squelch /alert add 1 "a shark"
    /squelch /alert add 1 "a guardian spirit"
    /squelch /alert add 1 "Swarmcontroller"
    /squelch /alert add 1 "SwarmSpawnB"
    /squelch /alert add 1 "The ground"

    /call PRINTMETHOD "Loading Priority Alert List"
    | comment out any goblin you don't prioritize 
    /squelch /alert clear 2
	/squelch /alert add 2 "Cash Treasure Goblin"
	/squelch /alert add 2 "Platinum Treasure Goblin"
	/squelch /alert add 2 "Augment Treasure Goblin"
	/squelch /alert add 2 "Paper Treasure Goblin"
	/squelch /alert add 2 "Treasure Goblin"

    | clear loot avoid list
    /squelch /alert clear 25

    | Stop editing
    /declare MaxMobs int outer -1
    /declare AttemptLootCounter int outer 0
    /declare startY float outer ${Me.Y}
	/declare startX float outer ${Me.X}
	/declare startZ float outer ${Me.Z}
	/declare startZone int outer ${Zone.ID}
    /declare startZoneName string outer ${Zone.ShortName}
	/declare tokenTimer timer outer

    /call PRINTMETHOD "Initialized"
    /call PRINTMETHOD "Camp set in zone ${startZoneName}"
    /call PRINTMETHOD "Location: X(${startX}) Y(${startY}) Z(${startZ})"
    /call PRINTMETHOD "Looting: ${DoLoot}"
    /call PRINTMETHOD "Loot INI File: ${lootINIFile}"

    /if (${Pet.ID}) /call CheckPetAoE
    /call CheckBuffs

    /call PRINTMETHOD "Starting the slaughter!"
    :KillLoop
    /call HandleDisconnect
    /if (${Zone.ID} != ${startZone}) {
         /call PRINTMETHOD "We left zone !!!"
        /if (${DynamicZone.Name.NotEqual[NULL]}) {
            /say #enter
            /delay 15s ${Zone.ID} == ${startZone}
            /squelch /warp loc ${startY} ${startX} ${startZ}
            /delay 1
        } else {
            /say #create solo ${startZoneName} 
            /delay 15s ${Zone.ID} == ${startZone} 
            /squelch /warp loc ${startY} ${startX} ${startZ} 
            /delay 1000 
            /dgge /say #enter
        }  
    }

    /if (${KeepMaxLevel}) {
        /if (${Me.Level} <= 79) {
            /alt on 90
        } else {
            /alt on 100
        }
    }

    /if (${GroupAlt} && !${Me.Grouped}) {
        /if (${Spawn[pc ${AltLooterName}].ID} != 0) {
            /invite ${AltLooterName} 
            /delay 1
        }
    }

    /if (!${DoLoot} && ${SpawnCount[corpse]}>=50) /call ClearCorpses

    /if (${Target.ID}) {
        /if (${Target.Type.Equal[Pet]} || ${Target.Type.Equal[Corpse]} || ${Target.Type.Equal[Pc]} || ${Target.ID} == ${Me.ID} || ${Target.CleanName.Equal[${Me.CleanName}'s Pet']}) /squelch /target clear 

        /if (${Target.Distance} > ${Target.MaxRangeTo} && ${NearestSpawn[${spawnSearch}].ID} != ${Target.ID}) {
            | /squelch /target clear 
            /if (${NearestSpawn[${spawnSearch}].ID}) /target id ${NearestSpawn[${spawnSearch}].ID}
        }

        /if (${Target.Distance} <= ${Target.MaxRangeTo} && ${Target.Speed} == 0 && !${Me.Combat}) {
            /call killthis 
            /if (${Target.ID}) /face fast
        }

        /if (${Me.Pet.ID} && ${Target.ID} && ${Me.Combat} && !${Me.Pet.Target.ID}) {
            /pet attack
        }        
	}

    /if (${SpawnCount[npc alert 2]} > 0) {
        /if (!${{Target.CleanName.Find[Treasure Goblin]}} > 0 && ${Stick.StickTarget} != ${Spawn[npc alert 2].ID}) {
            /target id ${Spawn[npc alert 2].ID}
            /delay 1 ${Target.ID}
            /if (${Target.Distance} > 5 && ${Target.CleanName.NotEqual[Raging Treasure Goblin]}) /squelch /warp t 
            /call killThis  
        }
	}

    /if (${DoLoot} && ${SpawnCount[${corpseSearch}]} && ${Me.FreeInventory}) /call LootMobs
    /call CheckGroundSpawns

    /if (${ClickAATokens} && ${FindItemCount[Token of Advancement]} && !${tokenTimer}) {
		/useitem "${FindItem[Token of Advancement].Name}"
		/varset tokenTimer 1s
	}

    /call CombatSpells
    
    /if (${SpawnCount[npc alert 2]} >= 3) {
        /if (${Me.AltAbilityReady[39914]}) { 
            /alt act 39914 
            /delay 3
        } 
        /if (${Me.AltAbilityReady[39911]}) {
            /alt act 39911
            /delay 3
        } 
	}

    /if (!${Target.ID}) {
        /if (${SpawnCount[${spawnSearch}]}) {
            /squelch /target id ${Spawn[${spawnSearch}].ID}
        }                                    
    }

    /call CheckAggro
    /if (${Macro.Return} <= 2 && ${Target.ID}) {
        /if (${Target.Distance} > 10) /squelch /warp t 
        /delay 2 
        /call killThis
    }

    /if (${SpawnCount[npc alert 2]} == 0 && ${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${startY}, ${startX}, ${startZ}]} > 10) /squelch /warp loc ${startY} ${startX} ${startZ}
    /call AggroZone
    /call CheckAggro
    /if (${Macro.Return}==13 && ${Me.Combat} && ${Target.Type.Equal[NPC]}) /goto :KillLoop
    /call CheckAggro
    /if (${Macro.Return}>0) /goto :KillLoop
    /delay 1s ${SpawnCount[${spawnSearch}]}
    /if (${SpawnCount[${spawnSearch}]}) /goto :KillLoop
    :EndLoop
    /if (${DoLoot} && ${SpawnCount[${corpseSearch}]} && ${Me.FreeInventory}) /call LootMobs
    /squelch /warp loc ${startY} ${startX} ${startZ}
    /call CheckPet
	/doevents
    /call RespawnZone
    /call AggroZone

    /goto :KillLoop
/return

sub HandleDisconnect()
    /if (${EverQuest.GameState.Equal[PRECHARSELECT]}) {
        /notify serverselect SERVERSELECT_PlayLastServerButton leftmouseup
        /delay 50
        /delay 30000 ${EverQuest.GameState.Equal[CHARSELECT]}
        /delay 3
    }
    /if (${EverQuest.GameState.Equal[CHARSELECT]}) {
        /notify CharacterListWnd CLW_Play_Button leftmouseup
        /delay 50
        /delay 30000 ${EverQuest.GameState.Equal[INGAME]}
        /delay 3
    }
/return

sub CheckPet
    /call CheckAggro
    /if (!${Pet.ID} && ${Me.AltAbilityReady[39915]} && ${Macro.Return} == 0) {
        /alt act 39915
        /delay 2500 ${Pet.ID}
    }
/return
sub CheckGroundSpawns
    /if (${LootGroundSpawns}) {
         /call PRINTMETHOD "Attempting to loot a ground spawn"
        /if (${Cursor.ID}) /autoinv 
        /if (${GroundItemCount[Generic(sm)]} > 0) {
            /squelch /itemtarget Generic(sm) 
            /if (${Ground.Distance} <= 20) {
                /nomodkey /click left itemtarget
            }
        }

        /if (${SpawnCount[npc alert 2]} == 0 && ${GroundItemCount[Generic(sm)]} && ${Ground.Distance} > 20) {
            /warp loc ${Ground.Y} ${Ground.X} ${Ground.Z}
        }
    }
/return

| RB.ClassAAs = {
|     Bard = 39908,
|     Beastlord = 39915,
|     Berserker = 39916,
|     Cleric = 39902,
|     Druid = 39906,
|     Enchanter = 39914,
|     Magician = 39913,
|     Monk = 39907,
|     Necromancer = 39911,
|     Paladin = 39903,
|     Ranger = 39904,
|     Rogue = 39909,
|     Shadowknight = 39905,
|     Shaman = 39910,
|     Warrior = 39901,
|     Wizard = 39912
| }

sub CheckBuffs
    /if (${useCoinSack} && ${Me.ItemReady[Bemvaras' Coin Sack]}) /useitem "Bemvaras' Coin Sack"
    /if (${useCurrencyCharm} && ${FindItem[Soulriever's Charm of Currency].ID} > 0 && ${Me.ItemReady[Soulriever's Charm of Currency]} && !${Me.Buff[Soulriever's Currency Doubler].ID}) /useitem "Soulriever's Charm of Currency"
    /if (${usePaladinAA} && (${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.PctHPs}<70) && ${Me.AltAbilityReady[39903]}) /alt act 39903
    /if (${useBemChest} && (${Me.Diseased.ID} || ${Me.Cursed.ID}) && ${FindItem[Bemvaras's Golden Breastplate Rk. I].ID} && ${Me.ItemReady[Bemvaras's Golden Breastplate Rk. I]}) /useitem "Bemvaras's Golden Breastplate Rk. I"
    /call CheckAggro
    /if (!${Me.Casting} && ${useClericAA} && !${Me.Buff[Cleric Mastery - Divine Health].ID} && ${Me.AltAbilityReady[39902]} && !${Me.Combat} && ${Macro.Return} == 0) {
        /alt act 39902
        /delay 3250 ${Me.Buff[Cleric Mastery - Divine Health].ID}
    }
    /if (${useBemLegs} && ${FindItem[Bemvaras's Holy Greaves].ID} > 0 && ${Me.ItemReady[Bemvaras's Holy Greaves]}) {
        /if (${UseExpPotions} && ${Me.ItemReady[Bemvaras 's Holy Greaves]} && ${Me.Buff[Bemvaras's Enhanced Learning].Duration.Ticks} <= 50) /useitem "Bemvaras's Holy Greaves"
    } else {
        /if (${UseExpPotions} && ${FindItemCount[Potion of Adventure II]} && ${Me.Buff[Potion of Adventure II].Duration.Ticks} <= 50 && !${Me.Buff[Bemvaras's Enhanced Learning].ID}) /useitem "Potion of Adventure II"
    }
    /if (${useBemGloves} && ${FindItem[Bemvaras's Holy Gauntlets].ID} > 0 && ${Me.ItemReady[Bemvaras's Holy Gauntlets]} && !${Me.Buff[Talisman of Guenhwyvar].ID}) /useitem "Bemvaras's Holy Gauntlets"
    /if (${useBemGloves} && ${FindItem[Bemvaras's Holy Gauntlets].ID} > 0) {
        /if (${FindItemCount[${buffCharmName}]} && !${Me.Buff[Circle of Fireskin].ID}) /itemnotify charm rightmouseup
    } else {
        /if (${useBuffCharm} && ${FindItemCount[${buffCharmName}]} && !${Me.Buff[${buffCharmBuffName}].ID}) /itemnotify charm rightmouseup
    }
/return

sub CombatSpells
    /call CheckBuffs
    /if (${FindItem[Ertz's Mage Stone].ID} && ${Me.ItemReady[Ertz's Mage Stone]}) /useitem "Ertz's Mage Stone"
    /if (!${Me.Buff[Shad's Warts].Duration.Ticks} && ${Me.AltAbilityReady[39905]}) /alt act 39905
    /if (!${Me.Buff[Mystereon's Prismatic Rune].Duration.Ticks} && ${Me.AltAbilityReady[39912]}) /alt act 39912
    /if (!${Me.Buff[Monk Mastery of A Thousand Fists].Duration.Ticks} && ${Me.AltAbilityReady[39907]}) /alt act 39907
    /if (${Me.AltAbilityReady[39910]} && ${SpawnCount[${spawnSearch}]} >= 3) /alt act 39910
    /if (${Me.AltAbilityReady[39911]} && ${SpawnCount[${spawnSearch}]} >= 3) /alt act 39911
    /if (${Me.AltAbilityReady[39909]}) /alt act 39909
    /if (${Me.AltAbilityReady[39916]}) /alt act 39916
    /if (${Me.AltAbilityReady[39908]}) /alt act 39908
    /if (${Me.AltAbilityReady[39904]}) /alt act 39904
    /if (!${Me.Casting.ID} && ${Me.Buff[Spikecoat].Duration.Ticks}<=50) {
        /useitem "${FindItem[living thorns].Name}"
        /delay 5
    }
    /if (${Target.Type.Equal[npc]} && ${Me.Class.ShortName.Equal[WIZ]} && !${Me.Stunned}) {
        /casting "Fires of Lorelahna"
        /delay 4
    }
    /if (${Target.Type.Equal[npc]} && ${Me.Class.ShortName.Equal[Mag]} && !${Me.Stunned}) {
        /casting "Fires of Lorelahna"
        /delay 4
    }
    /if (${Target.Type.Equal[npc]} && ${Me.Class.ShortName.Equal[Nec]} && !${Me.Stunned}) {
        /casting "Drucilog's Virulent Poison Rk. I"
        /delay 4
    }
    /if (${Target.Type.Equal[npc]} && ${Me.Class.ShortName.Equal[Dru]} && !${Me.Stunned}) {
        /casting "Flame Lick"
        /delay 4
    }
/return

sub CheckAggro
    /declare x int local
    /declare y int local 0
    /for x 1 to 13
        /if ( ${Me.XTarget[${x}].ID} > 0 && ${Me.XTarget[${x}].TargetOfTarget.ID} == ${Me.ID} &&  ${Spawn[id ${Me.XTarget[${x}].ID}].Type.NotEqual[Untargetable]} && ${Spawn[id ${Me.XTarget[${x}].ID}].Type.Equal[NPC]}) {
            /varcalc y ${y}+1
        }
    /next x 
/return ${y}

Sub CheckPetAoE
    /declare x int local 0
    /if (${Window[PetInfoWindow].Open}) {
        /for x 0 to 10
            /call CheckPetButton ${x} "hold" 0
            /call CheckPetButton ${x} "focus" 1
            |/call CheckPetButton ${x} "taunt" 0
        /next x
    }
 /return

 Sub CheckPetButton(numButton,buttonText,stateWanted)
    /if (${Window[PetInfoWindow].Child[Pet${numButton}_Button].Text.Equal[${buttonText}]}) {
        /if (${Window[PetInfoWindow].Child[Pet${numButton}_Button].Checked} != ${stateWanted}) {
            /notify PetInfoWindow Pet${numButton}_Button leftmouseup
        } 
    }
/return

Sub killthis
	/squelch /stick
	/attack on
	/if (${Pet.ID}) /pet attack
/return

sub RespawnZone
    /if (${SpawnCount[${mobsSearch}]} > MinMobsInZone) /return
    /if (${FindItem[${respawnItem}].TimerReady} > 0) /return
    /call PRINTMETHOD "Attempting to Respawn the Zone"
    /if (${SpawnCount[corpse]}>0) /call ClearCorpses
    /declare mobs int local ${SpawnCount[${mobsSearch}]}
    /delay 1s ${Cast.Ready[${respawnItem}]}
    /useitem "${respawnItem}"
    /if (${MaxMobs}==-1) {
        /delay 2s ${SpawnCount[${mobsSearch}]} > 0
        /varset MaxMobs ${SpawnCount[${mobsSearch}]}
    } else {
        /delay 1s ${SpawnCount[${mobsSearch}]} == ${MaxMobs}
    }
/return

sub AggroZone
    /call CheckAggro
    /if (${Macro.Return} > 0) /return
    /if (${SpawnCount[${mobsSearch}]} < MinMobsInZone) /return
    /if (${SpawnCount[${spawnSearch}]} > 0) /return
    /delay 5
    /target myself
    /delay 3
    /useitem "${aggroItem}"
    /delay 5
/return

sub LootMobs
    /if (!${SpawnCount[${corpseSearch}]}) /return
    /if (${Me.FreeInventory}==0) {
        /call ClearCorpses
        /return
    }
    /say #corpsefix
    /delay 0.5s
    /declare corpses int local 0
    
    :lootLoop 
        /doevents
        /target id ${NearestSpawn[${corpseSearch}].ID}
        /delay 1
        /if (${Target.ID} && ${Target.Distance}>10) {
            /warp t
            /delay 3
        }
        /if (${Cursor.ID} && ${Me.FreeInventory}) /autoinv
        /if (${Target.ID} && ${Target.Type.Equal[Corpse]})  {
            /loot
            /delay 3 ${Corpse.Open} || !${Target.ID}
        }
        /doevents
        /if (${Corpse.Open}) /call ScanCorpse
           
    /if (${SpawnCount[${corpseSearch}]}) /goto :lootLoop
    /call  ClearCorpses
    /squelch /alert clear 25
/return

Sub ScanCorpse
    /declare x int local 0
    /declare Rescan int local 0
    /declare MaxRescan int local CorpseScanLoops
    /delay CorpseOpenDelay ${Corpse.Items}
    /declare itemAction string local
    /declare lootItem string local
    /declare lootItemLink string local
    :reScan
    /for x 0 to 30
        /if (${Corpse.Item[${x}].ID}) {
            /varset lootItem ${Corpse.Item[${x}].Name}
            /varset lootItemLink ${Corpse.Item[${x}].ItemLink[CLICKABLE]}
            /varset itemAction ${Ini[${lootINIFile},${lootItem.Left[1]},${lootItem}]}
            /if (${itemAction.Equal[Keep]} || ${itemAction.Equal[Sell]} || ${itemAction.Equal[Fabled]} || ${itemAction.Equal[Cash]}) {
                /call LootItem ${x}
                /call PRINTMETHOD "Looting<${lootItemLink}> to ${itemAction}"
            } else /if (${itemAction.Equal[Ignore]}) {
                /call PRINTMETHOD "Skipping<${lootItemLink}>"
            } else /if (${lootItem.Find[${fabledCheck}]} > 0 && ${LootFabledItems}) {
                /call LootItem ${x}
                /call PRINTMETHOD "Looting<${lootItemLink}>"
            }
        }
        /varset lootItem ""
        /varset itemAction ""
    /next x

    /if (${Rescan}<= ${MaxRescan}) {
        /delay CorpseScanDelay
        /varcalc Rescan ${Rescan}+1
        /goto :reScan
    }

    /delay 1
    /nomodkey /notify LootWnd LW_DoneButton leftmouseup
    /delay 5s !${Corpse.Open}
    /delay 1
/return

Sub LootItem(slot)
    /if (!${Corpse.Open}) /return
    /if (!${Corpse.Item[${slot}].ID}) /return
    /if (${Me.FreeInventory}==0) {
        /call PRINTMETHOD "Full Inventory!"
        /return
    }
    /if (${Corpse.Item[${slot}].Lore}) {
        /if (${FindItemCount[${Corpse.Item[${slot}].Name}]} || ${FindItemBankCount[${Corpse.Item[${slot}].Name}]}) {
            /call PRINTMETHOD "Lore and We already have it :( ${Corpse.Item[${slot}].Name}"
            /return
        } 
    }

    /shift /itemnotify loot${slot} rightmouseup
    /delay 5s !${Corpse.Item[${slot}].ID} || !${Corpse.Open}
/return

sub ClearCorpses
    /hidec all
    /hidec looted
    /delay 0.5s
/return

sub Event_CantLoot
    /if (${Target.ID} && ${Target.Type.Equal[Corpse]}) {
        /alert add 25 id ${Target.ID}
        /target clear
        /varset AttemptLootCounter 0
    }
/return

sub Event_OorLoot
    /if (${Target.ID} && ${Target.Type.Equal[Corpse]}) {
        /if (${AttemptLootCounter} <= MaxLootAttempts) {
            /say #corpsefix
            /delay 0.5s
            /loot
            /varcalc AttemptLootCounter ${AttemptLootCounter} + 1
        } else {
            /alert add 25 id ${Target.ID} 
            /target clear 
            /varset AttemptLootCounter 0
        }
     }
/return

sub Event_InstTime(Line, Minutes)
    /if (${Minutes} <= RefreshInstanceAtMins) {
        /dgga /dzq
        /delay 5
        /say #create solo ${startZoneName}
        /delay 30s ${DynamicZone.Name.Length}
        /delay 10000 ${Zone.ID} == ${startZone}
        /dgge /say #enter
    }
/return