| Author: Bruise Lee aka Warriduh aka Handjabs

Sub Main
	
	/declare dummy int local
	/declare turbolootitems	string outer
	/declare AlertIndex int outer 1
	/declare loottry int outer 0
	/declare Skip bool outer FALSE
	/declare minLootValue int outer
	/declare loottotal int outer 
	/declare sometotal int outer
	/declare sometotal1 int outer
	/declare sometotal2 int outer
	/declare sometotal3 int outer	
	/declare singletotal int outer
	/declare lootslot int outer 
	/declare someslot int outer
	/declare someslot1 int outer
	/declare someslot2 int outer
	/declare someslot3 int outer		
	/declare singleslot int outer
	/declare lootAll string outer
	/declare someItems string outer
	/declare someItems1 string outer
	/declare someItems2 string outer
	/declare someItems3 string outer	
	/declare singleItems string outer
	/declare lootName string outer
	/declare lootSome string outer
	/declare lootSome1 string outer	
	/declare lootSome2 string outer
	/declare lootSome3 string outer			
	/declare lootSingle string outer
	/declare itemCount int outer
	/declare someCount int outer
	/declare someCount1 int outer	
	/declare someCount2 int outer
	/declare someCount3 int outer		
	/declare singleCount int outer
	
	/declare lootUsable int outer 0	| Set this to 1 if you want to loot an item that you don't currently have, isn't in any of the 3 lists below but is usable and can be equipped.
	/declare howMany int outer 0 | Set this to how many of the "someItems" list you want to loot. Combines bank + inventory when calculating.
	/declare howMany1 int outer 25 | Set this to how many of the "someItems1" list you want to loot. Combines bank + inventory when calculating.
	/declare howMany2 int outer 0 | Set this to how many of the "someItems2" list you want to loot. Combines bank + inventory when calculating.
	/declare howMany3 int outer 1 | Set this to how many of the "someItems3" list you want to loot. Combines bank + inventory when calculating.
	/varset minLootValue 20000 | Will loot any item with a vendor price >= this amount (in plat).

	| lootAll list will loot this item any time it comes across it on a corpse. 
	| someItems will loot x amount based on number set for howMany var above.
	| singleItems will loot until you have 1 in total. Combines bank + inventory when calculating.
	/varset lootAll /Gemstone of the Ages/Lesser Rainbow Crystal/Minor Rainbow Crystal/Greater Rainbow Crystal/Major Rainbow Crystal/Superior Lightstone/Greater Lightstone/Essence of Norrath/Essence of Qvic/Essence of Cazic Thule/Essence of Dragons Minor/Essence of Dragons Major/Essence of Gods Minor/Essence of Gods Major/Essence of the Abyss/Essence of Anguish/Essence of Loping Plains/Essence of Temple Veeshan/Essence of Old Commons/Essence of Sunderock/Supreme Rainbow Crystal/Flawless Rainbow Crystal/Blue Diamond/Black Sapphire/Greater Lightstone/Expensive Blue Diamond/The Prince of Darkness Quest Token/The Faceless Quest Token/The MCP Quest Token/The Oceanlord Quest Token/H-One N-One Quest Token/Split Paw Quest Token/The Lightbringer Quest Token/The Lightbringer Quest Token/The Tranquil Quest Token/
	/varset someItems /Augment Book 3.5 Page 1 of 10/Augment Book 3.5 Page 2 of 10/Augment Book 3.5 Page 3 of 10/Augment Book 3.5 Page 4 of 10/Augment Book 3.5 Page 5 of 10/Augment Book 3.5 Page 6 of 10/Augment Book 3.5 Page 7 of 10/Augment Book 3.5 Page 8 of 10/Augment Book 3.5 Page 9 of 10/Augment Book 3.5 Page 10 of 10/
	/varset someItems1 /Guardian's Upgrade/Guardian's Upgrade v2/Sorcerer's Upgrade/Sorcerer's Upgrade v2/Brawler's Upgrade/Brawler's Upgrade v2/Oracle's Upgrade/Oracle's Upgrade v2/
	/varset someItems2 /
	/varset someItems3 /A Glowing Hammer Wedge/A Glowing Hammer Face/A Glowing Hammer Claw/A Glowing Hammer Handle/A Glowing Hammer Neck/A Glowing Hammer Grip/
	/varset singleItems /Mount: Crack'n Crazy Traveler/Arcing Demon Familiar (Halloween Reward)/Angryface Familiar (Halloween Reward)/Mistress of Flame Familiar (Halloween Reward)/Black Unicorn Familiar (Halloween Reward)/Cazic Thule Familiar (Halloween Reward)/Chilled Devil Familiar (Halloween Reward)/Insane Goblin Familiar (Halloween Reward)/Stone Monster Familiar (Halloween Reward)/Battle-Hardened Army Ant/

|	/call openBags
	
	/hidecorpse looted
	/say #corpsefix
	/rsay [QuickLoot] ${Time} Started Looting

    
    :mainlootloop
    
	/if (${Me.FreeInventory}) {
		/if (${SpawnCount[npccorpse noalert 1]} > 0) {
			/target npccorpse${If[${AlertIndex}, noalert ${AlertIndex},]}

			/if ((${Target.ID}) && (${Target.Type.Equal[Corpse]})) {
						/if (${Target.Distance} > 200) {
							/say Corpse too far away to loot!!
							/call closeBags
/endmac
						}	
					/face fast
					:moveToCorpse
						/if (${Target.Distance} > 10 && ${Target.Distance} < 200) {
							/moveto id ${Target.ID}
							/delay 8
							/goto :moveToCorpse
						}

				/if (${Cursor.ID}) /autoi
				/loot
				/doevents

				/varset loottotal ${Corpse.Items}
				/varset sometotal ${Corpse.Items}
				/varset sometotal1 ${Corpse.Items}
				/varset sometotal2 ${Corpse.Items}				
				/varset sometotal3 ${Corpse.Items}				
				/varset singletotal ${Corpse.Items}
				/if (${loottotal}<=0 && ${sometotal}<=0 && ${sometotal1}<=0 && ${sometotal2}<=0 && ${sometotal3}<=0 && ${singletotal} <=0) { 
					/notify LootWnd DoneButton leftmouseup
				/delay 8
					/goto :mainlootloop 
				} 
				
				/varset itemCount 0
				/for lootslot 1 to ${loottotal}
					/if (${Corpse.Item[${lootslot}].ID}) {
						/varset lootName ${Corpse.Item[${lootslot}].Name}						
						/rsay ${Corpse.Item[${lootslot}].ItemLink[CLICKABLE]} found on ${Target.ID}
					/if ((${lootAll.Find[/${lootName}/]}) || ((${Corpse.Item[${lootslot}].Value} > ${Math.Calc[${minLootValue} * 1000]}) && (!${Corpse.Item[${lootslot}].NoDrop}))) {
							/varcalc itemCount ${itemCount}+1
						}
					}
				/next lootslot
				/doevents

				/for lootslot 1 to ${loottotal}
					/if ((${Corpse.Item[${lootslot}].CanUse}) && (${Corpse.Item[${lootslot}].WornSlots}>0)) {
						/if ((${Math.Calc[${FindItemCount[${Corpse.Item[=${lootslot}]}]}+${FindItemBankCount[=${lootslot}]}]}<1) && ${lootUsable}==1) {
						/rsay [Usable] Looting ${Corpse.Item[${lootslot}].ItemLink[CLICKABLE]}
						/itemnotify loot${lootslot} rightmouseup
						/delay 8 !${Corpse.Item[${lootslot}].ID}
						}
					}
				/next lootslot


				/varset someCount 0
				/for someslot 1 to ${sometotal}
					/if (${Corpse.Item[${someslot}].ID}) {
						/varset lootSome ${Corpse.Item[${someslot}].Name}						
						/if (${someItems.Find[/${lootSome}/]}) {
							/varcalc someCount ${someCount}+1
						}
					}
				/next someslot
				/doevents

				/varset someCount1 0
				/for someslot1 1 to ${sometotal1}
					/if (${Corpse.Item[${someslot1}].ID}) {
						/varset lootSome1 ${Corpse.Item[${someslot1}].Name}						
						/if (${someItems1.Find[/${lootSome1}/]}) {
							/varcalc someCount1 ${someCount1}+1
						}
					}
				/next someslot1
				/doevents

				/varset someCount2 0
				/for someslot2 1 to ${sometotal2}
					/if (${Corpse.Item[${someslot2}].ID}) {
						/varset lootSome2 ${Corpse.Item[${someslot2}].Name}						
						/if (${someItems2.Find[/${lootSome2}/]}) {
							/varcalc someCount2 ${someCount2}+1
						}
					}
				/next someslot2
				/doevents

				/varset someCount3 0
				/for someslot3 1 to ${sometotal3}
					/if (${Corpse.Item[${someslot3}].ID}) {
						/varset lootSome3 ${Corpse.Item[${someslot3}].Name}						
						/if (${someItems3.Find[/${lootSome3}/]}) {
							/varcalc someCount3 ${someCount3}+1
						}
					}
				/next someslot3
				/doevents

				/varset singleCount 0
				/for singleslot 1 to ${singletotal}
					/if (${Corpse.Item[${singleslot}].ID}) {
						/varset lootSingle ${Corpse.Item[${singleslot}].Name}						
						/if (${singleItems.Find[/${lootSingle}/]}) {
							/varcalc singleCount ${singleCount}+1
						}
					}
				/next singleslot
				/doevents

				/if (${itemCount} > 0) {
					/for lootslot 1 to ${loottotal}
						:LootItem
						/if (${Corpse.Item[${lootslot}].ID}) {
							/varset lootName ${Corpse.Item[${lootslot}].Name}
																																
							/if ((${lootAll.Find[/${lootName}/]}) || ((${Corpse.Item[${lootslot}].Value} > ${Math.Calc[${minLootValue} * 1000]}) && (!${Corpse.Item[${lootslot}].NoDrop}))) /call lootItem ${lootslot}						
						}
					/next lootslot
					/doevents
				}
					/doevents
				/if (${someCount} > 0) {
					/for someslot 1 to ${sometotal}
						:LootSomeItems
						/if (${Corpse.Item[${someslot}].ID}) {
							/varset lootSome ${Corpse.Item[${someslot}].Name}
																																
							/if (${someItems.Find[/${lootSome}/]}) /call someItem ${someslot}						
						}
					/next someslot
					/doevents
				}

				/if (${someCount1} > 0) {
					/for someslot1 1 to ${sometotal1}
						:LootSomeItems1
						/if (${Corpse.Item[${someslot1}].ID}) {
							/varset lootSome1 ${Corpse.Item[${someslot1}].Name}
																																
							/if (${someItems1.Find[/${lootSome1}/]}) /call someItem1 ${someslot1}						
						}
					/next someslot1
					/doevents
				}

				/if (${someCount2} > 0) {
					/for someslot2 1 to ${sometotal2}
						:LootSomeItems2
						/if (${Corpse.Item[${someslot2}].ID}) {
							/varset lootSome2 ${Corpse.Item[${someslot2}].Name}
																																
							/if (${someItems2.Find[/${lootSome2}/]}) /call someItem2 ${someslot2}						
						}
					/next someslot2
					/doevents
				}
				/if (${someCount3} > 0) {
					/for someslot3 1 to ${sometotal3}
						:LootSomeItems3
						/if (${Corpse.Item[${someslot3}].ID}) {
							/varset lootSome3 ${Corpse.Item[${someslot3}].Name}
																																
							/if (${someItems3.Find[/${lootSome3}/]}) /call someItem3 ${someslot3}						
						}
					/next someslot3
					/doevents
				}

				/if (${singleCount} > 0) {
					/for singleslot 1 to ${singletotal}
						:LootSingleItem
						/if (${Corpse.Item[${singleslot}].ID}) {
							/varset lootSingle ${Corpse.Item[${singleslot}].Name}
																																
							/if (${singleItems.Find[/${lootSingle}/]}) /call singleItem ${singleslot}						
						}
					/next singleslot
					/doevents
				}
				
				:DoneLooting
				/notify LootWnd DoneButton leftmouseup
				/if (${loottry} > 0) /varset loottry 0
				
				/doevents
				/if (${Window[LootWnd].Open}) /goto :DoneLooting
			}	
		} else {
			/if (${Me.Grouped}) /say ${Me.Name} - Done Looting

 
			/moveto yloc ${Math.Calc[${Int[${Me.Loc}]}+30]}
			/delay 25
			/moveto off
			/if (${AlertIndex}) /squelch /alert clear ${AlertIndex}
			/if (${loottry} > 0) /varset loottry 0 
			/call closeBags

|			/beep
			/return
		}
	} else {
		/rsay [quickLoot] My Inventory is full!!
		/moveto yloc ${Math.Calc[${Int[${Me.Loc}]}+30]} 
 /endmac
	}
	/goto :mainlootloop
/return

| ----------------------------------------------------------------------------------------------------------

sub lootItem(intLootSlot)

	| If item is LORE but already have one, don't loot it
	/if (${Corpse.Item[${lootslot}].Lore}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootName}]}+${FindItemBankCount[=${lootName}]}]}]}>=1) 
		/rsay [LORE] Skipping LORE ${Corpse.Item[${lootName}].ItemLink[CLICKABLE]} - Already have
		
	}
	/rsay [ALL] Looting ${Corpse.Item[${lootName}].ItemLink[CLICKABLE]}
	:WaitLootItem
		/ctrl /itemnotify loot${intLootSlot} rightmouseup
		
		/if (${Corpse.Item[${intLootSlot}].ID}) {
			/goto :WaitLootItem
		}
	
/return

| ----------------------------------------------------------------------------------------------------------

sub someItem(intSomeSlot)

	| Loot until X amount in inventory or bank
	/if (${Corpse.Item[${someslot}].ID}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootSome}]}+${FindItemBankCount[=${lootSome}]}]}]}>=${howMany}) {
		/rsay [SOME] Already have enough ${Corpse.Item[=${lootSome}].ItemLink[CLICKABLE]} - IGNORED			
/return
		}
	
	/rsay [SOME] Looting ${Corpse.Item[${lootSome}].ItemLink[CLICKABLE]}} - Total: ${Int[${Math.Calc[${FindItemCount[=${lootSome}]}+1+${FindItemBankCount[=${lootSome}]}]}]}
	:WaitLootSomeItems
		/ctrl /itemnotify loot${intSomeSlot} rightmouseup 		
		/if (${Corpse.Item[${intSomeSlot}].ID}) {
			/goto :WaitLootSomeItems
		}
	}
/return

-------------------------------------

sub someItem1(intSomeSlot1)

	| Loot until X amount in inventory or bank
	/if (${Corpse.Item[${someslot1}].ID}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootSome1}]}+${FindItemBankCount[=${lootSome1}]}]}]}>=${howMany1}) {
		/rsay [lootSOME1] Already have enough ${Corpse.Item[=${lootSome1}].ItemLink[CLICKABLE]} - IGNORED			
/return
		}
	
	/rsay [lootSOME1] Looting ${Corpse.Item[${lootSome1}].ItemLink[CLICKABLE]}} - Total: ${Int[${Math.Calc[${FindItemCount[=${lootSome1}]}+1+${FindItemBankCount[=${lootSome1}]}]}]}
	:WaitLootSomeItems1
		/ctrl /itemnotify loot${intSomeSlot1} rightmouseup 		
		/if (${Corpse.Item[${intSomeSlot1}].ID}) {
			/goto :WaitLootSomeItems1
		}
	}
/return

------------------------------------

sub someItem2(intSomeSlot2)

	| Loot until X amount in inventory or bank
	/if (${Corpse.Item[${someslot2}].ID}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootSome2}]}+${FindItemBankCount[=${lootSome2}]}]}]}>=${howMany2}) {
		/rsay [lootSOME2] Already have enough ${Corpse.Item[=${lootSome2}].ItemLink[CLICKABLE]} - IGNORED			
/return
		}
	
	/rsay [lootSOME2] Looting ${Corpse.Item[${lootSome2}].ItemLink[CLICKABLE]}} - Total: ${Int[${Math.Calc[${FindItemCount[=${lootSome2}]}+1+${FindItemBankCount[=${lootSome2}]}]}]}
	:WaitLootSomeItems2
		/ctrl /itemnotify loot${intSomeSlot2} rightmouseup 		
		/if (${Corpse.Item[${intSomeSlot2}].ID}) {
			/goto :WaitLootSomeItems2
		}
	}
/return

--------------------------------

sub someItem3(intSomeSlot3)

	| Loot until X amount in inventory or bank
	/if (${Corpse.Item[${someslot3}].ID}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootSome3}]}+${FindItemBankCount[=${lootSome3}]}]}]}>=${howMany3}) {
		/rsay [lootSOME3] ${Corpse.Item[=${lootSome3}].ItemLink[CLICKABLE]} - FOUND			
/return
		}
	
	/rsay [lootSOME3] Looting ${Corpse.Item[${lootSome3}].ItemLink[CLICKABLE]}} - Total: ${Int[${Math.Calc[${FindItemCount[=${lootSome3}]}+1+${FindItemBankCount[=${lootSome3}]}]}]}
	:WaitLootSomeItems3
		/ctrl /itemnotify loot${intSomeSlot3} rightmouseup 		
		/if (${Corpse.Item[${intSomeSlot3}].ID}) {
			/goto :WaitLootSomeItems3
		}
	}
/return

| ----------------------------------------------------------------------------------------------------------

sub singleItem(intSingleSlot)

	| Loot until I have 1 in inventory or bank
	/if (${Corpse.Item[${singleslot}].ID}) {
		/if (${Int[${Math.Calc[${FindItemCount[=${lootSingle}]}+${FindItemBankCount[=${lootSingle}]}]}]}>=1) {			
			/rsay [SINGLE] Skipping ${Corpse.Item[${lootSingle}].ItemLink[CLICKABLE]} - IGNORED			
			/return
		}
	}
	/rsay [SINGLE] Looting ${Corpse.Item[=${lootSingle}].ItemLink[CLICKABLE]}
	:WaitLootSingleItem
		/ctrl /itemnotify loot${intSingleSlot} rightmouseup
		/if (${Corpse.Item[${intSingleSlot}].ID}) {
			/goto :WaitLootSingleItem
		}
	
/return


| ----------------------------------------------------------------------------------------------------------

Sub openBags
	/declare bag int local
	
	/if (!${Window[InventoryWindow].Open}) /nomodkey /keypress inventory
	/for bag 1 to 10
		/if (!${Window[pack${bag}].Open}) /nomodkey /itemnotify pack${bag} rightmouseup
	/next bag

/return

| ----------------------------------------------------------------------------------------------------------

Sub closeBags
	/declare bag int local
	
	/if (${Window[InventoryWindow].Open}) /nomodkey /notify InventoryWindow DoneButton leftmouseup
	/for bag 1 to 10
		/if (${Window[pack${bag}].Open}) /nomodkey /itemnotify pack${bag} rightmouseup
	/next bag

/return

| ----------------------------------------------------------------------------------------------------------
